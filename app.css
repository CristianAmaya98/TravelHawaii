/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}[hidden],template{display:none}html{font-size:62.5%;box-sizing:border-box}*,:after,:before{box-sizing:inherit}body{font-family:Roboto,sans-serif;font-size:1.6rem}[class$=__container]{width:90%;max-width:120rem;margin:0 auto}img{max-width:100%;height:auto;display:block}a{text-decoration:none}ul{list-style:none;padding:0;margin:0}.header{background-image:linear-gradient(90deg,#3b92d5 50%,#35b9be);padding:4rem 1rem;position:relative;overflow-x:hidden}.header__navbar-container{display:flex;justify-content:space-between}.header__logo{font-size:2.2rem;color:#fff;font-family:Anonymous Pro,monospace;letter-spacing:.2rem;font-weight:400}.header__navbar{display:flex;justify-content:space-around;gap:4rem}.header__navbar-item{color:#fff}.header__body{display:grid;grid-template-columns:repeat(2,1fr);height:70vh;margin-bottom:2rem}.header__body-info{display:flex;flex-direction:column;justify-content:center;align-items:flex-start;gap:3rem}.header__info{max-width:40rem}.header__text{margin:0;color:#fff;font-size:8rem;font-weight:700;text-shadow:0 1px 5px hsla(0,0%,100%,.97)}.header__button{display:inline-flex;justify-content:space-around;align-items:center;gap:1rem;border:1px solid #fff;padding:.6rem 2rem;border-radius:1rem;color:#fff;font-weight:100;cursor:pointer}.header__icon{width:4rem}.header__imagen{background-image:url(assets/icons/logo.png);background-position:50%;background-size:cover;background-repeat:no-repeat}.redes{position:absolute;width:auto;right:-6rem;top:0;bottom:0;display:flex;align-items:center;gap:2.5rem;transform:rotate(90deg)}.redes__text{font-weight:500;color:#fff}.redes__icon,.redes__text{cursor:pointer}.inspired{margin-bottom:3rem}.inspired__contenido{display:grid;grid-template-columns:repeat(6,1fr);align-items:center}.inspired__experiencie{grid-column:1/3;display:flex;flex-direction:column;row-gap:.5rem}.inspired__experiencie-title{margin:0;color:#3f90c5;font-weight:500;font-size:1.5rem}.inspired__experiencie-subtitle{color:#000;font-weight:700;font-size:2.8rem}.inspired__experiencie-description{margin:0;max-width:20rem;text-align:left;font-weight:300}.inspired__rows-container{display:flex;gap:1rem}.inspired__row{width:4rem;cursor:pointer;color:gray}.inspired__tours{grid-column:3/7;display:grid;grid-template-columns:repeat(3,1fr);gap:2rem;z-index:1;margin-top:-4rem}.tour__imagen-container{position:relative;border-radius:.5rem;overflow:hidden}.tour__imagen{width:100%;height:35vh;object-fit:cover}.tour__description{position:absolute;bottom:0;width:100%;padding:1rem 2rem;color:#fff;opacity:.8}.tour__description p{margin:0;font-size:2rem;margin-bottom:.5rem}.tour__description span{display:flex;align-items:center;gap:.5rem;font-size:1.3rem}.tour__description span svg{width:1.5rem}.tour__info{display:flex;flex-direction:column;gap:1rem;margin-top:1rem}.tour__info-item{display:flex;align-items:center;gap:1rem;font-weight:700;color:gray}.adventure__grid{display:grid;grid-template-columns:repeat(4,1fr);gap:3rem}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
